//
//  ExtractorsAlgorithmTests.swift
//  Essentia
//
//  Created by Jason Cardwell on 11/22/17.
//  Copyright © 2017 Moondeer Studios. All rights reserved.
//
import XCTest
@testable import Essentia
import AVFoundation
import Accelerate

// Declare custom operators since they cannot be exported from `Essentia`.
infix operator >>
infix operator >!
postfix operator >>|
postfix operator >>>

private enum TestBasis: String {
  case accuracy, deviation, differenceMean, percentDeviation, differenceMeanOrDeviation, equality
}

private let accuracy: Float = 1e-2
private let deviation: Float = 1e-3


/// Helper for generating an attachment with a comparison of actual and expected arrays.
///
/// - Parameters:
///   - actual: The actual array of values generated by test.
///   - expected: The array of values the test expected.
///   - block: The block for generating the comparison table.
///   - descriptor: The descriptor to which the array values belong.
///   - results: The assertions performed and whether the assertion succeeded.
/// - Returns: An attachment with a comparison of `actual` and `expected`.
private func comparisonAttachment<T, U>(with actual: [T],
                                        expected: [T],
                                        using block: ([T], [T], inout String) -> U,
                                        descriptor: String,
                                        results: [TestBasis:Bool]) -> XCTAttachment
{
  var passedTests: [TestBasis] = [], failedTests: [TestBasis] = []
  var includeAccuracy = false, includeDeviation = false

  for (basis, result) in results {
    if result { passedTests.append(basis) } else { failedTests.append(basis) }
    switch basis {
      case .accuracy, .differenceMean:        includeAccuracy = true
      case .deviation, .percentDeviation:     includeDeviation = true
      case .differenceMeanOrDeviation: includeAccuracy = true; includeDeviation = true
      case .equality:                         continue
    }
  }

  var text = "Comparison of actual and expected values for descriptor '\(descriptor)':\n\n"

  if includeAccuracy { print("Accuracy value used during tests: \(accuracy)", to: &text) }
  if includeDeviation { print("Deviation value used during tests: \(deviation * 100)%", to: &text) }

  if includeAccuracy || includeDeviation { print("", to: &text) }

  if !passedTests.isEmpty {
    print("Passed:", passedTests.map(\.rawValue).joined(separator: ", "), to: &text)
  }

  if !failedTests.isEmpty {
    print("Failed:", failedTests.map(\.rawValue).joined(separator: ", "), to: &text)
  }

  if !(passedTests.isEmpty && failedTests.isEmpty) { print("", to: &text) }

  _ = block(actual, expected, &text)

  let attachment = XCTAttachment(data: text.data(using: .utf8)!,
                                 uniformTypeIdentifier: "public.text",
                                 lifetime: .keepAlways)

  attachment.name = descriptor

  return attachment

}

class ExtractorsAlgorithmTests: XCTestCase {

  /// Tests the functionality of the Extractor algorithm.
  func testExtractor() {

    let extractor = ExtractorAlgorithm()
    extractor[realVecInput: .audio] = loadVector(name: "extractor_input")
    extractor.compute()

    let pool = extractor[poolOutput: .pool]

    for descriptor in pool.descriptorNames {

      let expectedFileName = "\(descriptor)_expected"
      let descriptorʹ = "descriptor: '\(descriptor)'"

      switch pool[descriptor: descriptor] {

      case .real(let actual):
       XCTAssertEqual(actual, loadValue(name: expectedFileName), accuracy: accuracy, descriptorʹ)

      case .realVec(let actual):

        let expected = loadVector(name: expectedFileName)

        let results: [TestBasis:Bool] = [
//          .accuracy:
//            XCTAssertEqual(actual, expected, accuracy: accuracy, descriptorʹ),
//          .deviation:
//            XCTAssertEqual(actual, expected, deviation: deviation, descriptorʹ),
//          .differenceMean:
//            XCTAssertDifferenceMeanLessThanOrEqual(actual, expected, accuracy,descriptorʹ),
//          .percentDeviation:
//            XCTAssertPercentDeviationLessThanOrEqual(actual, expected, deviation, descriptorʹ),
          .differenceMeanOrDeviation:
            XCTAssertDifferenceMeanOrDeviationLessThanOrEqual(actual, expected,
                                                              differenceMean: accuracy,
                                                              deviation: deviation, descriptorʹ)
      ]

        if results.values.contains(false) {

          let attachment = comparisonAttachment(with: actual,
                                                expected: expected,
                                                using: dumpComparison(of:with:target:),
                                                descriptor: descriptor,
                                                results: results)
          add(attachment)

        }

      case .realVecVec(let actual):

        let expected = loadVectorVector(name: expectedFileName)

        let results: [TestBasis:Bool] = [
//          .accuracy:
//            XCTAssertEqual(actual, expected, accuracy: accuracy, descriptorʹ),
//          .deviation:
//            XCTAssertEqual(actual, expected, deviation: deviation, descriptorʹ),
//          .differenceMean:
//            XCTAssertDifferenceMeanLessThanOrEqual(actual, expected, accuracy,descriptorʹ),
//          .percentDeviation:
//            XCTAssertPercentDeviationLessThanOrEqual(actual, expected, deviation, descriptorʹ),
          .differenceMeanOrDeviation:
          XCTAssertDifferenceMeanOrDeviationLessThanOrEqual(actual, expected,
                                                            differenceMean: accuracy,
                                                            deviation: deviation, descriptorʹ)
        ]

        if results.values.contains(false) {

          let attachment = comparisonAttachment(with: actual,
                                                expected: expected,
                                                using: dumpComparison(of:with:target:),
                                                descriptor: descriptor,
                                                results: results)
          add(attachment)

        }

      case .string(let actual):
        XCTAssertEqual(actual, loadString(name: expectedFileName), descriptorʹ)

      case .stringVec(let actual):
        let currentFailureCount = testRun!.failureCount
        let expected = loadStringVector(name: expectedFileName)
        XCTAssertEqual(actual, expected, descriptorʹ)

        if testRun!.failureCount > currentFailureCount {

          let attachment = comparisonAttachment(with: actual,
                                                expected: expected,
                                                using: dumpComparison(of:with:target:),
                                                descriptor: descriptor,
                                                results: [.equality: false])
          add(attachment)

        }

      case .stringVecVec, .realMatrixVec, .stereoSample, .stereoSampleVec, .none:
        XCTFail("Unexpected value type stored for descriptor '\(descriptor)'.")

      }

    }

  }

}
